version: '3'

services:

  order-db:
    image: mongo:latest
    container_name: order-db
    restart: always
    networks:
      - choreography-saga
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - "27017:27017"

  service-db:
    image: postgres:latest
    container_name: service-db
    restart: always
    networks:
      - choreography-saga
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=service-db
    ports:
      - "5432:5432"
    volumes:
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - choreography-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - choreography-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"


  order-service:
    build: './order-service'
    container_name: order-service
    depends_on:
      - kafka
      - order-db
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_DB_URI=mongodb://admin:123456@order-db:27017
    ports:
      - "3000:3000"

  product-validation-service:
    build: './product-validation-service'
    container_name: product-validation-service
    depends_on:
      - kafka
      - service-db
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=service-db
      - DB_PORT=5432
      - DB_USER=product
      - DB_PASSWORD=product
    ports:
      - "8090:8090"

  payment-service:
    build: './payment-service'
    container_name: payment-service
    depends_on:
      - kafka
      - service-db
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=service-db
      - DB_PORT=5432
      - DB_USER=payment
      - DB_PASSWORD=payment
    ports:
      - "8091:8091"

  inventory-service:
    build: './inventory-service'
    container_name: inventory-service
    depends_on:
      - kafka
      - service-db
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=service-db
      - DB_PORT=5432
      - DB_USER=inventory
      - DB_PASSWORD=inventory
    ports:
      - "8092:8092"

networks:
  choreography-saga:
    driver: bridge